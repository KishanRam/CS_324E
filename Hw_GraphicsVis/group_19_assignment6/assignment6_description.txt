This simulation depicts a playground containing a swing set, slide, and see-saw. The swings move according to the pendulum force (determined by gravity, the angle of the swing, and the length of the swing rope) and drag. The swings can be individually dragged to a new position to allow them to swing from a new starting angle. The slide depicts a person sliding down it, which move according to an initial impulse force and continual friction force. The seesaw depicts two people going up and down on a seesaw according to spring forces with dampening.

Rachel implemented the classes SwingSet and Swing. The SwingSet class takes parameters x and y (position), h (height), w (width), l (length), and c (color). The only method of the class is display(), which draws the swing set composed of a top bar (a rectangle starting at x, y or width l and height 10) and 2 legs on each side (quads draw from each end of the top bar with width in the x direction of 10, height of h, and distance from the center of the corner as w to the left and right respectively). 
The Swing class takes parameters PVector origin (top of the rope), floats theta, len (length of rope), and damp (dampening factor), and color c. It has another PVector bob, which is the position of the hinge on the swing that the rope attaches to. This is dtermined with the x value being len * sin(theta) + origin.x and the y value being len * cos(theta) + origin.y. The display() method draws the rope of the swing, draws the bob as a circle with radius 10, and draws a chair from a quad and a rectangle relative to (and behind) the bob position. If the bob is selected (boolean dragging), it is black. Otherwise, it is gray. The applyForces() method determines the angular acceleration angAcc with the formula (-1 * gravity / this.len) * sin(this.theta), with gravity set to 0.4 in the class. This is used to change the angular velocity angVel. Then angVel is dampened by multiplying by damp, and theta is updated by angVel.

David implemented the Seesaw class to simulate a moving seesaw. The class takes in parameters for the resting y value of the bottom edge of the seesaw, the resting y value of the upper edge of the seesaw, the x value of the midpoint of the seesaw, and its length. The forces used to guide the seesaw's behavior are spring forces and dampening. The forces are applied in the draw loop using the class method applyForces(). When any key is pressed, the animation is reset to the beginning. One unexpected challenge is that we were unable to get the seesaws to start at reasonable value when a key was pressed. 

Kishan implemented the Slide class. This class takes parametes of x and y position, the scale (r), the x and y velocity velx and vely, and two colors. The display() method displays a slide (composed of a rectangle and quad) with a person sitting on it. The applyForces() method takes as parameters force in the x and force in the y (fx and fy) updates velx and vely depending on the forces applied. This allows multiple forces to be applied in separate calls before the position is affected. The move() method updates the position x and y of the person based on the velocity. The reset() method returns the person to the top of the slide. When any key is pressed, the reset() function is called. A random force is applied as well, giving the person different starting velocity each time a key is pressed. The person therefore moves according to an initial impulse force and the force of friction. The person comes to a halt at the bottom of the slide.